'use strict';
sap.ui.define([
    'sap/base/Log',
    '../cpe/init',
    './init-dialogs',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    './ui5-version-utils',
    '../cpe/error-utils',
    '../utils/version'
], function (log, __init, ___init_dialogs, ___sap_ux_private_control_property_editor_common, ___ui5_version_utils, ___cpe_error_utils, ___utils_version) {
    'use strict';
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule && typeof obj.default !== 'undefined' ? obj.default : obj;
    }
    function __ui5_require_async(path) {
        return new Promise(function (resolve, reject) {
            sap.ui.require([path], function (module) {
                if (!(module && module.__esModule)) {
                    module = module === null || !(typeof module === 'object' && path.endsWith('/library')) ? { default: module } : module;
                    Object.defineProperty(module, '__esModule', { value: true });
                }
                resolve(module);
            }, function (err) {
                reject(err);
            });
        });
    }
    const init = _interopRequireDefault(__init);
    const initDialogs = ___init_dialogs['initDialogs'];
    const showMessage = ___sap_ux_private_control_property_editor_common['showMessage'];
    const startPostMessageCommunication = ___sap_ux_private_control_property_editor_common['startPostMessageCommunication'];
    const enableTelemetry = ___sap_ux_private_control_property_editor_common['enableTelemetry'];
    const getUI5VersionValidationMessage = ___ui5_version_utils['getUI5VersionValidationMessage'];
    const getError = ___cpe_error_utils['getError'];
    const getUi5Version = ___utils_version['getUi5Version'];
    var __exports = async function (rta) {
        const version = await getUi5Version();
        const versionParts = version.split('.');
        const minor = parseInt(versionParts[1], 10);
        const flexSettings = rta.getFlexSettings();
        if (flexSettings.telemetry === true) {
            enableTelemetry();
        }
        const actionHandlers = [];
        function subscribe(handler) {
            actionHandlers.push(handler);
        }
        const {sendAction} = startPostMessageCommunication(window.parent, async function onAction(action) {
            for (const handler of actionHandlers) {
                try {
                    await handler(action);
                } catch (error) {
                    log.error('Handler Failed: ', getError(error));
                }
            }
        });
        const syncViewsIds = await getAllSyncViewsIds(minor);
        initDialogs(rta, syncViewsIds, minor);
        if (minor > 77) {
            const ExtensionPointService = (await __ui5_require_async('open/ux/preview/client/adp/extension-point')).default;
            const extPointService = new ExtensionPointService(rta);
            extPointService.init(subscribe);
        }
        await init(rta);
        const ui5VersionValidationMsg = getUI5VersionValidationMessage(version);
        if (ui5VersionValidationMsg) {
            sendAction(showMessage({
                message: ui5VersionValidationMsg,
                shouldHideIframe: true
            }));
            return;
        }
        if (syncViewsIds.length > 0) {
            sendAction(showMessage({
                message: 'Have in mind that synchronous views are detected for this application and controller extensions are not supported for such views. Controller extension functionality on these views will be disabled.',
                shouldHideIframe: false
            }));
        }
        log.debug('ADP init executed.');
    };
    async function getAllSyncViewsIds(minor) {
        const syncViewIds = [];
        try {
            if (minor < 120) {
                const Element = (await __ui5_require_async('sap/ui/core/Element')).default;
                const elements = Element.registry.filter(() => true);
                elements.forEach(ui5Element => {
                    if (isSyncView(ui5Element)) {
                        syncViewIds.push(ui5Element.getId());
                    }
                });
            } else {
                const ElementRegistry = (await __ui5_require_async('sap/ui/core/ElementRegistry')).default;
                const elements = ElementRegistry.all();
                Object.entries(elements).forEach(_ref => {
                    let [key, ui5Element] = _ref;
                    if (isSyncView(ui5Element)) {
                        syncViewIds.push(key);
                    }
                });
            }
        } catch (error) {
            log.error('Could not get application sync views', getError(error));
        }
        return syncViewIds;
    }
    const isSyncView = element => {
        return element?.getMetadata()?.getName()?.includes('XMLView') && element?.oAsyncState === undefined;
    };
    return __exports;
});