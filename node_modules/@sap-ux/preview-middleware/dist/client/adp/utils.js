"use strict";

sap.ui.define(["sap/m/MessageToast"], function (MessageToast) {
  "use strict";

  /**
   * Defers the resolution of the promise, stores resolve/reject functions so that they can be accessed at a later stage.
   *
   * @description A Deferred object contains an unresolved promise along with the functions to resolve or reject that promise.
   *
   * @returns {Deferred} Deferred object
   */
  function createDeferred() {
    let resolve = null;
    let reject = null;
    const promise = new Promise((res, rej) => {
      resolve = res;
      reject = rej;
    });
    if (resolve === null || reject === null) {
      throw new Error('Failed to initialize resolve and reject functions.');
    }
    return {
      promise,
      resolve,
      reject
    };
  }

  /**
   * Checks if the fragment name associated with a command matches the specified fragment name.
   *
   * @param {FlexCommand} command - The command object containing the prepared change to be examined.
   * @param {string} fragmentName - The name of the fragment to match against the command's change.
   * @returns {boolean} Returns true if the command's change contains a fragment path that matches
   *                    the specified fragment name; otherwise, returns false.
   */
  function matchesFragmentName(command, fragmentName) {
    if (typeof command.getPreparedChange !== 'function') {
      return false;
    }
    const change = command.getPreparedChange().getDefinition();
    return change.content?.fragmentPath?.includes(`${fragmentName}.fragment.xml`) || false;
  }

  /**
   * Displays a message to the user indicating that an XML fragment will be created upon saving a change.
   *
   * @param {string} message - The message to be shown in the message toast.
   * @param {number} duration - The duration during which message toast will be active.
   */
  function notifyUser(message) {
    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
    MessageToast.show(message, {
      duration
    });
  }
  var __exports = {
    __esModule: true
  };
  __exports.createDeferred = createDeferred;
  __exports.matchesFragmentName = matchesFragmentName;
  __exports.notifyUser = notifyUser;
  return __exports;
});
//# sourceMappingURL=utils.js.map