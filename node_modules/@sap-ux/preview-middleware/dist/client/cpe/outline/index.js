'use strict';
sap.ui.define([
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    './nodes',
    'sap/base/Log',
    '../error-utils'
], function (___sap_ux_private_control_property_editor_common, ___nodes, Log, ___error_utils) {
    'use strict';
    const outlineChanged = ___sap_ux_private_control_property_editor_common['outlineChanged'];
    const showMessage = ___sap_ux_private_control_property_editor_common['showMessage'];
    const transformNodes = ___nodes['transformNodes'];
    const getError = ___error_utils['getError'];
    async function initOutline(rta, sendAction) {
        const outline = await rta.getService('outline');
        const scenario = rta.getFlexSettings().scenario;
        let hasSentWarning = false;
        const reuseComponentsIds = new Set();
        async function syncOutline() {
            try {
                const viewNodes = await outline.get();
                const outlineNodes = await transformNodes(viewNodes, scenario, reuseComponentsIds);
                sendAction(outlineChanged(outlineNodes));
                if (reuseComponentsIds.size > 0 && scenario === 'ADAPTATION_PROJECT' && !hasSentWarning) {
                    sendAction(showMessage({
                        message: 'Have in mind that reuse components are detected for some views in this application and controller extensions and adding fragments are not supported for such views. Controller extension and adding fragment functionality on these views will be disabled.',
                        shouldHideIframe: false
                    }));
                    hasSentWarning = true;
                }
            } catch (error) {
                Log.error('Outline sync failed!', getError(error));
            }
        }
        await syncOutline();
        outline.attachEvent('update', syncOutline);
    }
    var __exports = { __esModule: true };
    __exports.initOutline = initOutline;
    return __exports;
});