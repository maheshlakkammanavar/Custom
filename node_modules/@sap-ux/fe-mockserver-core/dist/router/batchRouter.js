"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchRouter = exports.isPartChangeSet = void 0;
const http = __importStar(require("http"));
const odataRequest_1 = __importDefault(require("../request/odataRequest"));
const batchParser_1 = require("./batchParser");
/**
 * Returns the result whether isRequest part of changeset or not.
 * @param part
 * @returns {boolean}
 */
function isPartChangeSet(part) {
    return part.isChangeSet;
}
exports.isPartChangeSet = isPartChangeSet;
let aggregate412BatchResponseInstance;
const NL = '\r\n';
/**
 * Handles the part request.
 * @param partDefinition
 * @param dataAccess
 * @param boundary
 * @param tenantId
 * @param globalHeaders
 * @param isChangeSetPart
 * @returns {string | null}
 */
async function handlePart(partDefinition, dataAccess, boundary, tenantId, globalHeaders, isChangeSetPart) {
    const partRequest = new odataRequest_1.default({ ...partDefinition, tenantId: tenantId }, dataAccess);
    await partRequest.handleRequest();
    const isResponse412ChangeSet = (partRequest === null || partRequest === void 0 ? void 0 : partRequest.statusCode) === 412 && !!isChangeSetPart;
    const { batchPartRes, header, resContent, contentId } = createBatchResponseObject(partRequest, partDefinition, boundary, globalHeaders, isResponse412ChangeSet);
    // All 412 batch responses should be transformed and returned as single response
    if (isResponse412ChangeSet) {
        aggregate412BatchResponseInstance.add412Response(header, resContent, contentId);
        return null;
    }
    return batchPartRes;
}
/**
 * Creates a batch response object.
 * @param partRequest
 * @param partDefinition
 * @param boundary
 * @param globalHeaders
 * @param isResponse412ChangeSet
 * @returns a batch response object
 */
function createBatchResponseObject(partRequest, partDefinition, boundary, globalHeaders, isResponse412ChangeSet) {
    let batchResponse = '';
    if (!isResponse412ChangeSet) {
        batchResponse += `--${boundary}${NL}`;
    }
    batchResponse += `Content-Type: application/http${NL}`;
    batchResponse += `Content-Transfer-Encoding: binary${NL}`;
    const contentId = partDefinition.contentId;
    if (partDefinition.contentId && !isResponse412ChangeSet) {
        batchResponse += `Content-ID: ${contentId}${NL}`;
    }
    if (partRequest.getETag()) {
        batchResponse += `ETag: ${partRequest.getETag()}${NL}`;
    }
    if (partRequest.getETag()) {
        batchResponse += `ETag: ${partRequest.getETag()}${NL}`;
    }
    batchResponse += NL;
    const responseData = partRequest.getResponseData();
    batchResponse += `HTTP/1.1 ${partRequest.statusCode} ${http.STATUS_CODES[partRequest.statusCode]}${NL}`;
    for (const headerName in partRequest.responseHeaders) {
        batchResponse += `${headerName}: ${partRequest.responseHeaders[headerName]}${NL}`;
    }
    for (const headerName in partRequest.globalResponseHeaders) {
        globalHeaders[headerName] = partRequest.globalResponseHeaders[headerName];
    }
    batchResponse += NL; // End of part header
    const header = batchResponse;
    if (responseData) {
        batchResponse += responseData;
        //batchResponse += NL; // End of body content
    }
    batchResponse += NL;
    const resContent = isResponse412ChangeSet ? JSON.parse(responseData) : null;
    return { batchPartRes: batchResponse, header, resContent, contentId };
}
/**
 * Creates instance of 412 responses aggregated from batch changeset request.
 * @returns void
 */
function aggregate412BatchResponse() {
    const batch412Response = {
        header: '',
        error: {
            code: '',
            message: '',
            severity: '',
            details: []
        }
    };
    let firstPart = true;
    let length = 0;
    return {
        add412Response: function (header, resContent, contentId) {
            if (firstPart) {
                batch412Response.header = header;
                batch412Response.error = {
                    code: resContent.error.code,
                    message: resContent.error.message,
                    severity: resContent.error['@Common.Severity'],
                    details: []
                };
                firstPart = false;
            }
            batch412Response.error.details.push(resContent.error.details[0]);
            batch412Response.error.details[batch412Response.error.details.length - 1]['@Core.ContentID'] = contentId;
            length++;
        },
        getUnifiedResponse: function () {
            let batchResponse = '';
            batchResponse += batch412Response.header;
            batchResponse += NL;
            const { error } = batch412Response;
            batchResponse += JSON.stringify({ error: error });
            batchResponse += NL;
            return batchResponse;
        },
        getLength: function () {
            return length;
        }
    };
}
/**
 * Creates a router dedicated to batch request handling.
 * @param dataAccess the current DataAccess object
 * @returns a router function for batch handling
 */
function batchRouter(dataAccess) {
    return async (req, res, next) => {
        try {
            dataAccess.checkSession(req);
            const boundary = (0, batchParser_1.getBoundary)(req.headers['content-type']);
            const body = req.body;
            const batchData = (0, batchParser_1.parseBatch)(new batchParser_1.BatchContent(body), boundary);
            const globalHeaders = {};
            let batchResponse = '';
            //initialize the instance of aggregator of batch 412 responses
            aggregate412BatchResponseInstance = aggregate412BatchResponse();
            for (const part of batchData.parts) {
                if (isPartChangeSet(part)) {
                    batchResponse += `--${batchData.boundary}${NL}`;
                    batchResponse += `Content-Type: multipart/mixed; boundary=${part.boundary}${NL}`;
                    batchResponse += NL;
                    for (const changeSetPart of part.parts) {
                        const batchPartRes = await handlePart(changeSetPart, dataAccess, part.boundary, req.tenantId, globalHeaders, true);
                        if (batchPartRes !== null) {
                            batchResponse += batchPartRes;
                        }
                    }
                    // append the 412 batch response
                    if (aggregate412BatchResponseInstance.getLength() > 0) {
                        batchResponse += aggregate412BatchResponseInstance.getUnifiedResponse();
                    }
                    batchResponse += `--${part.boundary}--${NL}`;
                }
                else {
                    batchResponse += await handlePart(part, dataAccess, batchData.boundary, req.tenantId, globalHeaders);
                }
            }
            //If there are 412 responses, override and return a single 412 error response
            if (aggregate412BatchResponseInstance.getLength()) {
                batchResponse = `--${batchData.boundary}${NL}`;
                batchResponse += aggregate412BatchResponseInstance.getUnifiedResponse();
            }
            batchResponse += `--${batchData.boundary}--${NL}`;
            res.statusCode = 200;
            for (const globalHeaderName in globalHeaders) {
                if (globalHeaders[globalHeaderName]) {
                    res.setHeader(globalHeaderName, globalHeaders[globalHeaderName]);
                }
            }
            res.setHeader('Content-Type', `multipart/mixed; boundary=${batchData.boundary}`);
            res.setHeader('odata-version', dataAccess.getMetadata().getVersion());
            res.write(batchResponse);
            res.end();
        }
        catch (e) {
            next(e);
        }
    };
}
exports.batchRouter = batchRouter;
//# sourceMappingURL=batchRouter.js.map