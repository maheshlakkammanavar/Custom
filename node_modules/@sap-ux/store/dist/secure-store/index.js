"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSecureStore = void 0;
const utils_1 = require("../utils");
const dummy_store_1 = require("./dummy-store");
const keytar_store_1 = require("./keytar-store");
function getKeytar(log) {
    try {
        return require('keytar');
    }
    catch (err) {
        log.warn((0, utils_1.errorString)(err));
        log.warn(`Could not "require('keytar')". Trying VSCode's copy`);
        let vscode;
        try {
            vscode = require('vscode');
        }
        catch (e) {
            log.warn((0, utils_1.errorString)(e));
            log.warn('Could not get hold of vscode');
            return undefined;
        }
        try {
            return require(`${vscode?.env?.appRoot}/node_modules.asar/keytar`);
        }
        catch (e) {
            log.warn((0, utils_1.errorString)(e));
            log.warn('Could not get keytar from vscode node_modules.asar');
        }
        try {
            return require(`${vscode?.env?.appRoot}/node_modules/keytar`);
        }
        catch (e) {
            log.warn((0, utils_1.errorString)(e));
            log.warn('Could not get keytar from vscode node_modules');
        }
        return undefined;
    }
}
/**
 * Create an instance of a store
 */
const getSecureStore = (log) => {
    if ((0, utils_1.isAppStudio)() || process.env.FIORI_TOOLS_DISABLE_SECURE_STORE) {
        return new dummy_store_1.DummyStore(log);
    }
    else {
        const keytar = getKeytar(log);
        return keytar ? new keytar_store_1.KeytarStore(log, keytar) : new dummy_store_1.DummyStore(log);
    }
};
exports.getSecureStore = getSecureStore;
__exportStar(require("./types"), exports);
//# sourceMappingURL=index.js.map